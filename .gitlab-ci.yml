# ------------
# Docker Image
# ------------
include:
  - template: Code-Quality.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml

# ------------
# Various Jobs
# ------------
stages:
  - check
  - build
  - test
  - deploy

# ------------
# Stage: check
# ------------
clang-format:
  stage: check
  image: ubuntu:20.04
  before_script:
    - apt-get update && apt-get install -y libtool clang-format clang-tidy
  script:
    - find . -regex '.*\.\(ino\|cpp\|hpp\|cc\|cxx\|h\)' -exec cat {} \; | diff -u <(find . -regex '.*\.\(ino\|cpp\|hpp\|cc\|cxx\|h\)' -exec clang-format -style=file {} -verbose \;) -

buildifier:
  stage: check
  image: ubuntu:20.04
  before_script:
    - apt-get update && apt-get install -y wget 
    - wget https://github.com/bazelbuild/buildtools/releases/download/3.5.0/buildifier
    - chmod +x buildifier
    - mv buildifier /usr/bin
  script:
    - buildifier -v -d -r .

cppcheck:
  stage: check
  image: ubuntu:20.04
  before_script:
    - apt-get update && apt-get install -y cppcheck python python-pygments
  script:
    - cppcheck --template=gcc --enable=all --inconclusive --std=c++14 -I perception/**/*.h perception/**/*.cpp  > static_code_analysis.log
    - cppcheck --template=gcc --enable=all --inconclusive --std=c++14 -I perception/**/*.h perception/**/*.cpp --xml 2> static_code_analysis.xml
    - cppcheck-htmlreport --file=static_code_analysis.xml --report-dir=static_code_analysis_report --source-dir=.
  artifacts:
    name: static_code_analysis
    paths:
      - static_code_analysis_report/
      - static_code_analysis.xml
      - static_code_analysis.log
    expire_in: 7 days

# ------------
# Stage: Build
# ------------
bazel-build-and-test:
  stage: build
  image: registry.gitlab.com/jinay1991/spleeter
  script:
    - bazel build //... 
    - bazel test //...  --test_output=all --nocache_test_results
  after_script:
    - pip install -U pip 
    - pip install -U xunitmerge
    - xunitmerge $(find bazel-out/ -name test.xml) ./merged_test_results.xml
  artifacts:
    reports:
      junit: merged_test_results.xml
    name: TestResults
    when: on_success

doxygen:
  stage: build
  image: ubuntu:20.04
  before_script:
    - apt-get update && apt-get install -y doxygen graphviz plantuml
  script:
    - echo "Generating Doxygen Documentation"
    - doxygen Doxyfile
  artifacts:
    paths:
      - doc
    expire_in: 1 day
  only:
    refs:
      - master

# ------------
# Stage: Test
# ------------
code-coverage:
  stage: test
  image: registry.gitlab.com/jinay1991/spleeter
  script:
    - bazel coverage -s --combined_report=lcov --instrumentation_filter=//... --coverage_report_generator=@bazel_tools//tools/test:coverage_report_generator  //...
    - export OUTPUT_DIR=$(bazel info execution_root)
    - export COVERAGE_INFO=$(find $OUTPUT_DIR -name coverage.dat)
    - genhtml -s --num-spaces 4 --legend --highlight --sort -t "Code Coverage" --demangle-cpp --function-coverage --branch-coverage -o coverage $COVERAGE_INFO
  coverage: /functions.*:\s(\d+.\d+%)/
  allow_failure: true
  artifacts:
    paths:
      - coverage/
    name: code-coverage
    when: on_success
    expire_in: 1 day
  only:
    refs:
      - master

# -------------
# Stage: Deploy
# -------------
package:
  stage: deploy
  dependencies:
    - bazel-build-and-test
  script:
    - bazel build //:spleeter-dev
    - mv bazel-bin/spleeter-dev.tar.gz libspleeter-dev.tar.gz
  artifacts:
    paths:
      - libspleeter-dev.tar.gz
  
pages:
  stage: deploy
  dependencies:
    - code-coverage
    - cppcheck
    - doxygen
  script:
    - mkdir -p reports
    - echo "<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>Spleeter</title> </head> <body> <ul> <li><a href="coverage/">Code Coverage Report</a></li> <li><a href="static_code_analysis_report/">Static Code Analysis Report</a></li> <li><a href="doc/html">Doxygen Documentation</a></li> </ul> </body> </html>" > reports/index.html
    - mv coverage reports/coverage
    - mv static_code_analysis_report/ reports/static_code_analysis_report
    - mv doc/ reports/doc
    - mv reports/ public
  artifacts:
    paths:
      - public
  only:
    refs:
      - master
